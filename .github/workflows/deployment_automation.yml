name: Server Deployment Automation

on:
    workflow_dispatch:
    push:
        branches:
            - main

jobs:

    build_and_push:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up JDK 17
                uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: 'corretto'
                    cache: gradle

            -   name: Make .env File
                run: echo "${{ secrets.ENV_FILE }}" > .env

            -   name: Gradle Caching
                uses: actions/cache@v3
                with:
                    path: |
                        ~/.gradle/caches
                        ~/.gradle/wrapper
                    key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                    restore-keys: |
                        ${{ runner.os }}-gradle-

            -   name: Build with Gradle
                run: ./gradlew build -x test -x check --parallel --no-daemon --build-cache

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v2

            -   name: Login to Docker Hub
                uses: docker/login-action@v1
                with:
                    username: ${{ secrets.DOCKER_USERNAME }}
                    password: ${{ secrets.DOCKER_PASSWORD }}

            -   name: Build And Push Docker Image
                uses: docker/build-push-action@v4
                with:
                    context: .
                    push: true
                    tags: |
                        rlawhddbs/performuse-server:latest
                        rlawhddbs/performuse-server:${{ github.sha }}
                    platforms: linux/amd64,linux/arm64
                    cache-from: type=gha
                    cache-to: type=gha,mode=max

            -   name: Deploy To EC2 Instance
                uses: appleboy/ssh-action@v1.1.0
                with:
                    host: ${{ secrets.EC2_HOST }}
                    username: ${{ secrets.EC2_USERNAME }}
                    key: ${{ secrets.EC2_PRIVATE_KEY }}
                    script: |
                        cd performuse-server
                        docker-compose pull
                        docker-compose up -d
                        docker image prune -f

    #병렬 실행을 위해 따로 분리
    send_require_files:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Send Require Files to EC2
                uses: appleboy/scp-action@v0.1.7
                with:
                    host: ${{ secrets.EC2_HOST }}
                    username: ${{ secrets.EC2_USERNAME }}
                    key: ${{ secrets.EC2_PRIVATE_KEY }}
                    source: "docker-compose.yml"
                    target: "/home/ubuntu/performuse-server"
                    overwrite: true
